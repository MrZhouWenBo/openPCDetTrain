# CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
CLASS_NAMES: ['Car', 'Pedestrian']
# 模型所需检测的类型
# CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist',  'Van', 'Heavy_Truck', 'Light_Truck',  'Tricycle',  'Small_Bus',  'Big_Bus', 'Ying_Er_Che']


DATA_CONFIG:
    # _BASE_CONFIG_: cfgs/dataset_configs/waymo_dataset.yaml
    # 数据配置文件路径
    _BASE_CONFIG_: cfgs/dataset_configs/my_kitti_dataset_yolo_down4.yaml

MODEL:
    NAME: CenterPoint

    # VFE:
    #     NAME: MeanVFE

    # BACKBONE_3D:
    #     NAME: VoxelResBackBone8x

    # MAP_TO_BEV:
    #     NAME: HeightCompression
    #     NUM_BEV_FEATURES: 256
    # 这个东西要和data2Voexl的输出channel对齐
    BACKBONE_2D:
        SHARED_CONV_CHANNEL: 64
        resChannels: [64, 128, 256, 512]
        convChannels: [512, 1024, 512, 256]
        NAME: ImitateYoloBackbone

        BLOCK_CONV_NUMS: []

        # LAYER_NUMS: [5, 5]  # len() > block组建的个数  5 每个组件内除了第一个外的 卷积次数
        # LAYER_STRIDES: [1, 2]  #每个block组件首个cov 的stride
        # NUM_FILTERS: [128, 256] # 每个block组件的输出channel
        # UPSAMPLE_STRIDES: [1, 2]
        # NUM_UPSAMPLE_FILTERS: [256, 256]

    DENSE_HEAD:
        NAME: CenterHead
        CLASS_AGNOSTIC: False

        CLASS_NAMES_EACH_HEAD: [
            # ['Car', 'Pedestrian', 'Cyclist']
            ['Car', 'Pedestrian']
            # ['Car', 'Pedestrian', 'Cyclist',  'Van', 'Heavy_Truck', 'Light_Truck',  'Tricycle',  'Small_Bus',  'Big_Bus', 'Ying_Er_Che']
        ]

        SHARED_CONV_CHANNEL: 64
        USE_BIAS_BEFORE_NORM: True
        NUM_HM_CONV: 2
        SEPARATE_HEAD_CFG:
            HEAD_ORDER: ['center', 'center_z', 'dim', 'rot']
            HEAD_DICT: {
                'center': {'out_channels': 2, 'num_conv': 2},
                'center_z': {'out_channels': 1, 'num_conv': 2},
                'dim': {'out_channels': 3, 'num_conv': 2},
                'rot': {'out_channels': 2, 'num_conv': 2},
            }

        # 数据编码参数
        TARGET_ASSIGNER_CONFIG:
            FEATURE_MAP_STRIDE: 4
            NUM_MAX_OBJS: 500
            GAUSSIAN_OVERLAP: 0.1
            MIN_RADIUS: 2

        LOSS_CONFIG:
            LOSS_WEIGHTS: {
                'cls_weight': 1.0,
                'loc_weight': 2.0,
                'code_weights': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
            }

        POST_PROCESSING:
            SCORE_THRESH: 0.45
            POST_CENTER_LIMIT_RANGE: [-75.2, -75.2, -2, 75.2, 75.2, 4]
            MAX_OBJ_PER_SAMPLE: 100
            NMS_CONFIG:
                NMS_TYPE: nms_gpu
                NMS_THRESH: 0.1
                NMS_PRE_MAXSIZE: 4096
                NMS_POST_MAXSIZE: 100

    POST_PROCESSING:
        RECALL_THRESH_LIST: [0.3, 0.5, 0.7]

        EVAL_METRIC: kitti


OPTIMIZATION:
    BATCH_SIZE_PER_GPU: 4
    NUM_EPOCHS: 80

    OPTIMIZER: adam_onecycle
    LR: 0.001
    WEIGHT_DECAY: 0.01
    MOMENTUM: 0.9

    MOMS: [0.95, 0.85]
    PCT_START: 0.4
    DIV_FACTOR: 10
    # 用于计算在多少个epoch  对应的第多少个iteration时进行学习率调整
    DECAY_STEP_LIST: [35, 45]
    LR_DECAY: 0.1
    LR_CLIP: 0.0000001

    LR_WARMUP: False
    WARMUP_EPOCH: 1

    GRAD_NORM_CLIP: 10
